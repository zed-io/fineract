/**
 * Create Payment Reminder Job
 * Creates a scheduled job for sending payment reminders
 */

import { JobManager, Job, JobType, JobStatus, JobExecutionInterval, JobPriority } from '../models/job';
import { createContextLogger } from '../utils/logger';

// Create logger
const logger = createContextLogger('CreatePaymentReminderJob');

/**
 * Create the payment reminder job
 * @param jobManager Job manager instance
 * @returns The created job or undefined if it already exists
 */
export const createPaymentReminderJob = async (jobManager: JobManager): Promise<Job | undefined> => {
  try {
    // Check if job already exists
    const existingJobs = await jobManager.getJobsByType('payment_reminder_processing' as JobType, true);
    const existingJob = existingJobs.find(j => j.name === 'Payment Reminder Processing');
    
    if (existingJob) {
      logger.info('Payment reminder job already exists', { jobId: existingJob.id });
      
      // Check if job is active and return it
      if (existingJob.isActive) {
        return existingJob;
      }
      
      // Reactivate job if it exists but is inactive
      await jobManager.resumeJob(existingJob.id);
      return await jobManager.getJob(existingJob.id);
    }
    
    logger.info('Creating payment reminder job');
    
    // Create new job
    const job: Job = {
      id: undefined, // Will be generated by the job manager
      name: 'Payment Reminder Processing',
      description: 'Sends reminders for upcoming loan repayments and recurring deposit installments',
      jobType: 'payment_reminder_processing' as JobType,
      cronExpression: '0 9 * * *', // Run at 9 AM every day
      executionInterval: JobExecutionInterval.DAILY,
      status: JobStatus.SCHEDULED,
      priority: JobPriority.HIGH,
      parameters: {
        reminder_types: ['loan', 'savings_recurring_deposit'], // Process both loan and recurring deposit reminders
        testMode: false // Set to true for testing
      },
      nextRunTime: new Date(Date.now() + 5 * 60000), // Start in 5 minutes
      createdAt: new Date(),
      updatedAt: new Date(),
      isActive: true,
      retryCount: 0,
      maxRetries: 3,
      timeoutSeconds: 600, // 10 minutes timeout
      version: 1
    };
    
    // Schedule job
    const createdJob = await jobManager.scheduleJob(job);
    logger.info('Created payment reminder job', { jobId: createdJob.id });
    
    return createdJob;
  } catch (error) {
    logger.error('Failed to create payment reminder job:', error);
    throw error;
  }
};

export default createPaymentReminderJob;